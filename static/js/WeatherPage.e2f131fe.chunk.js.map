{"version":3,"sources":["pages/Weather/WeatherService.tsx","pages/Weather/Weather.tsx"],"names":["weatherServiceInstance","API_KEY","baseUrl","city","axios","get","this","params","units","q","appid","then","response","data","catch","error","console","log","lat","lon","exclude","Weather","useState","setCity","isLoading","setIsLoading","weatherData","setWeather","forecastData","setForecastWeather","useEffect","getWeather","finally","getWeatherForecast","delayedHandleInputChange","useCallback","func","timer","args","context","clearTimeout","setTimeout","apply","debounce","event","value","target","className","size","spinning","type","onChange","name","weather","description","src","icon","alt","Math","round","main","temp","daily","map","day","Intl","DateTimeFormat","weekday","format","dt","night"],"mappings":"mNA8CeA,EADgB,IA3C/B,WAEE,aAGE,IAFQC,EAER,uDAF0B,mCAClBC,EACR,uDAD0B,2CAC1B,yBAFQD,UAER,KADQC,UAJZ,8CASE,SAAWC,GACT,OAAOC,IACJC,IADI,UACGC,KAAKJ,QADR,WAC0B,CAC7BK,OAAQ,CACNC,MAAO,SACPC,EAAGN,EACHO,MAAOJ,KAAKL,WAGfU,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,OAAM,SAACC,GAENC,QAAQC,IAAIF,QArBpB,gCAyBE,WACE,OAAOX,IACJC,IADI,UACGC,KAAKJ,QADR,WAC0B,CAC7BK,OAAQ,CACNW,IAAK,KACLC,IAAK,KACLC,QAAS,SACTZ,MAAO,SACPE,MAAOJ,KAAKL,WAGfU,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,OAAM,SAACC,GAENC,QAAQC,IAAIF,UAvCpB,M,OCuGeM,UApGC,WACd,MAAwBC,mBAAS,QAAjC,mBAAOnB,EAAP,KAAaoB,EAAb,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAAkCH,mBAAc,MAAhD,mBAAOI,EAAP,KAAoBC,EAApB,KACA,EAA2CL,mBAAc,MAAzD,mBAAOM,EAAP,KAAqBC,EAArB,KAkBAC,qBAAU,YAfV,SAAoB3B,GAClBH,EACG+B,WAAW5B,GACXQ,MAAK,SAACE,GACLc,EAAWd,MAEZmB,SAAQ,kBAAMP,GAAa,MAU9BM,CAAW5B,KACV,CAACA,IACJ2B,qBAAU,WARR9B,EAAuBiC,qBAAqBtB,MAAK,SAACE,GAChDgB,EAAmBhB,QAUpB,IAEH,IAiBMqB,EAA2BC,sBAbhB,SAACC,GAChB,IAAIC,EAEJ,OAAO,WAAoC,IAAD,uBAAXC,EAAW,yBAAXA,EAAW,gBACxC,IAAMC,EAAUjC,KACZ+B,GAAOG,aAAaH,GACxBA,EAAQI,YAAW,WACjBJ,EAAQ,KACRD,EAAKM,MAAMH,EAASD,KACnB,MAIsCK,EAjBnB,SAACC,GACzB,IAAQC,EAAUD,EAAME,OAAhBD,MACRtB,EAAQsB,MAegE,IAC1E,OACE,qBAAKE,UAAU,oBAAf,SACGvB,EACC,cAAC,IAAD,CAAMuB,UAAU,SAASC,KAAK,QAAQC,SAAUzB,IAEhD,qCACE,qBAAKuB,UAAU,aAAf,SACE,cAAC,IAAD,CAAOG,KAAK,OAAOC,SAAUjB,MAE/B,sBAAKa,UAAU,gBAAf,UACE,qBAAKA,UAAU,eAAf,SAA+BrB,EAAY0B,OAC3C,qBAAKL,UAAU,sBAAf,SAAsCrB,EAAY2B,QAAQ,GAAGC,cAC7D,qBACEP,UAAU,eACVQ,IAAG,4CAAuC7B,EAAY2B,QAAQ,GAAGG,KAA9D,WACHC,IAAI,SAEN,sBAAKV,UAAU,sBAAf,UACGW,KAAKC,MAAMjC,EAAYkC,KAAKC,MAD/B,cAKF,qBAAKd,UAAU,WAAf,gBACGnB,QADH,IACGA,OADH,EACGA,EAAckC,MAAMC,KAAI,SAACC,GAAD,OACvB,sBAAKjB,UAAU,gBAAf,UACE,qBAAKA,UAAU,eAAf,SACG,IAAIkB,KAAKC,eAAe,QAAS,CAAEC,QAAS,UAAWC,OAAgB,IAATJ,EAAIK,MAErE,qBACEd,IAAG,4CAAuCS,EAAIX,QAAQ,GAAGG,KAAtD,WACHC,IAAI,eACJV,UAAU,kBAEZ,sBAAKA,UAAU,uBAAf,uBAEGW,KAAKC,MAAMK,EAAIH,KAAKS,OAFvB,WAKA,sBAAKvB,UAAU,uBAAf,qBAEGW,KAAKC,MAAMK,EAAIH,KAAKG,KAFvB,aAdkCA,EAAIK","file":"static/js/WeatherPage.e2f131fe.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport class WeatherService {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(\n    private API_KEY: string = '0bf1d5f6e1ff530158a2e691a88eadc7',\n    private baseUrl: string = 'https://api.openweathermap.org/data/2.5/',\n  ) {\n    // do nothing\n  }\n\n  getWeather(city: string): Promise<any> {\n    return axios\n      .get(`${this.baseUrl}weather`, {\n        params: {\n          units: 'metric',\n          q: city,\n          appid: this.API_KEY,\n        },\n      })\n      .then((response) => response.data)\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.log(error);\n      });\n  }\n\n  getWeatherForecast(): Promise<any> {\n    return axios\n      .get(`${this.baseUrl}onecall`, {\n        params: {\n          lat: '49',\n          lon: '24',\n          exclude: 'hourly',\n          units: 'metric',\n          appid: this.API_KEY,\n        },\n      })\n      .then((response) => response.data)\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.log(error);\n      });\n  }\n}\nconst weatherServiceInstance = new WeatherService();\nexport default weatherServiceInstance;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './Weather.scss';\nimport { Input, Spin } from 'antd';\nimport weatherServiceInstance from './WeatherService';\n\nconst Weather = () => {\n  const [city, setCity] = useState('Lviv');\n  const [isLoading, setIsLoading] = useState(true);\n  const [weatherData, setWeather] = useState<any>(null);\n  const [forecastData, setForecastWeather] = useState<any>(null);\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  function getWeather(city: string) {\n    weatherServiceInstance\n      .getWeather(city)\n      .then((data) => {\n        setWeather(data);\n      })\n      .finally(() => setIsLoading(false));\n  }\n\n  function getWeatherForecast() {\n    weatherServiceInstance.getWeatherForecast().then((data) => {\n      setForecastWeather(data);\n    });\n  }\n\n  useEffect(() => {\n    getWeather(city);\n  }, [city]);\n  useEffect(() => {\n    getWeatherForecast();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const handleInputChange = (event: any) => {\n    const { value } = event.target;\n    setCity(value);\n  };\n  const debounce = (func: any) => {\n    let timer: any;\n    // eslint-disable-next-line func-names\n    return function (this: any, ...args: any) {\n      const context = this;\n      if (timer) clearTimeout(timer);\n      timer = setTimeout(() => {\n        timer = null;\n        func.apply(context, args);\n      }, 1000);\n    };\n  };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const delayedHandleInputChange = useCallback(debounce(handleInputChange), []);\n  return (\n    <div className=\"weather-component\">\n      {isLoading ? (\n        <Spin className=\"loader\" size=\"large\" spinning={isLoading} />\n      ) : (\n        <>\n          <div className=\"search-bar\">\n            <Input type=\"text\" onChange={delayedHandleInputChange} />\n          </div>\n          <div className=\"weather-card \">\n            <div className=\"weather-city\">{weatherData.name}</div>\n            <div className=\"weather-description\">{weatherData.weather[0].description}</div>\n            <img\n              className=\"weather-icon\"\n              src={`https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`}\n              alt=\"icon\"\n            />\n            <div className=\"weather-temperature\">\n              {Math.round(weatherData.main.temp)}\n              °c\n            </div>\n          </div>\n          <div className=\"forecast\">\n            {forecastData?.daily.map((day: any) => (\n              <div className=\"forecast-item\" key={day.dt}>\n                <div className=\"forecast-day\">\n                  {new Intl.DateTimeFormat('en-GB', { weekday: 'short' }).format(day.dt * 1000)}\n                </div>\n                <img\n                  src={`https://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`}\n                  alt=\"weather icon\"\n                  className=\"forecast-icon\"\n                />\n                <div className=\"forecast-temperature\">\n                  NIGHT:&nbsp;\n                  {Math.round(day.temp.night)}\n                  °c\n                </div>\n                <div className=\"forecast-temperature\">\n                  DAY:&nbsp;\n                  {Math.round(day.temp.day)}\n                  °c\n                </div>\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Weather;\n"],"sourceRoot":""}